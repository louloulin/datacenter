@plan1.md 按计划继续实现相关功能，实现后增加测试验证，验证通过后，更新 @plan1.md 标记实现的功能


在disruptorx子模块，按照 @disruptorx.md 的计划，实现相关功能，增加测试验证，验证通过后更新 @disruptorx.md 标记实现的功能，中文说明

plan3.md 按计划，在 disruptorx 目录，基于现有的代码实现相关功能，实现后增加测试验证，验证通过后更新 plan3.md 标记实现的功能


@disruptor3.md 完善整个disruptorx项目，实现功能后增加测试验证，验证通过后更新 @disruptor3.md 标记实现的功能

@disruptor4.md 按照计划实现相关功能，同时优化整个代码结构，实现后增加测试验证，验证通过后更新 @disruptor4.md 标记实现的功能


基于 api.md 文档中设计的新API方案，对现有的DisruptorX代码库进行重构改造，实现以下具体任务：

**主要目标：**
1. 实现api.md中定义的简化API设计，重点包括：
   - 核心EventBus接口和实现（支持emit/on/topic等基础操作）
   - Kotlin DSL构建器（eventBus<T> { } 语法）
   - 渐进式复杂度设计（从3行代码启动到分布式配置）
   - 协程友好的异步API（suspend函数支持）

**具体实现要求：**
1. **保留现有架构优势**：基于现有的RingBufferWrapper、EventProcessorWrapper等核心组件进行改造，不要重新实现
2. **API层重构**：创建新的简化API层，隐藏复杂的分布式细节
3. **向后兼容**：确保现有的LMAX Disruptor兼容层继续工作
4. **分布式功能集成**：将现有的DistributedEventBus、NodeManager等组件整合到新API中

**实现步骤：**
1. 创建核心EventBus接口和基础实现
2. 实现Kotlin DSL构建器和扩展函数
3. 集成现有的分布式组件到新API
4. 编写全面的单元测试和集成测试
5. 创建性能基准测试验证性能指标
6. 编写使用示例展示API易用性

**验证标准：**
- 所有测试通过（单元测试、集成测试、性能测试）
- 新API能够实现api.md中的所有使用示例
- 性能不低于现有实现的95%
- 代码覆盖率达到80%以上

**文档更新：**
测试验证通过后，更新api.md文档，标记已实现的功能模块，包括实现状态、测试结果和性能指标。

请按照这个计划逐步实现，每完成一个主要模块后进行测试验证，确保质量。