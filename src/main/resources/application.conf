disruptor {
  # 缓冲区大小，必须是2的幂
  buffer-size = 4096
  
  # 等待策略，可选值: BlockingWait, YieldingWait, BusySpinWait, SleepingWait
  wait-strategy = "yielding"
  
  # 生产者类型，可选值: SINGLE, MULTI
  producer-type = "multi"
}

akka {
  # 是否启用集群模式
  cluster-enabled = false
  
  # 种子节点列表，仅在集群模式下有效
  seed-nodes = []
  
  # Akka Actor配置
  actor {
    provider = "local"
    
    # 默认邮箱配置
    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
  }
  
  # 日志配置
  loglevel = "INFO"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off
}

db {
  # 数据库连接URL
  url = "jdbc:postgresql://localhost:5432/hftdc"
  
  # 数据库用户名
  username = "hftdc"
  
  # 数据库密码
  password = "password"
  
  # 连接池大小
  pool-size = 10
}

engine {
  # 每个订单簿最大订单数
  max-orders-per-book = 1000000
  
  # 最大交易品种数
  max-instruments = 1000
  
  # 快照间隔（毫秒）
  snapshot-interval = 60000
  
  # 清理闲置Actor的时间（分钟）
  cleanup-idle-actors-after-minutes = 30
}

recovery {
  # 是否启用恢复功能
  enabled = true
  
  # 是否包含快照前的事件
  include-events-before-snapshot = true
  
  # 快照前事件的时间窗口（毫秒）
  events-before-snapshot-time-window-ms = 10000
  
  # 是否自动启动快照管理器
  auto-start-snapshots = true
}

# 日志相关配置
journal {
  # 日志目录
  base-dir = "data/journal"
  
  # 快照目录
  snapshot-dir = "data/snapshots"
  
  # 刷盘间隔（毫秒）
  flush-interval-ms = 1000
}

# 市场数据配置
market-data {
  # 发布间隔（毫秒）
  publish-interval-ms = 1000
  
  # 最大订阅数
  max-subscriptions = 5000
}

# API服务配置
api {
  # HTTP服务端口
  http-port = 8080
  
  # WebSocket服务端口
  ws-port = 8081
  
  # REST API基础路径
  base-path = "/api/v1"
  
  # 是否启用CORS
  enable-cors = true
  
  # 请求超时时间（毫秒）
  request-timeout-ms = 30000
}

# 监控配置
monitoring {
  # 是否启用Prometheus监控
  prometheus-enabled = true
  
  # Prometheus端口
  prometheus-port = 9090
  
  # 监控数据刷新间隔（秒）
  metrics-interval-seconds = 15
} 