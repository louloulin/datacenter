disruptor {
  # 缓冲区大小，必须是2的幂，生产环境使用较大缓冲区
  buffer-size = 16384
  
  # 生产环境使用BusySpinWait获取更低延迟
  wait-strategy = "busySpin"
  
  # 生产者类型，可选值: SINGLE, MULTI
  producer-type = "multi"
}

akka {
  # 生产环境启用集群模式
  cluster-enabled = true
  
  # 种子节点列表，生产环境配置
  seed-nodes = [
    "akka://hftdc@node1:2551",
    "akka://hftdc@node2:2551"
  ]
  
  # Akka Actor配置
  actor {
    provider = "cluster"
    
    # 生产环境使用优化的邮箱配置
    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
    
    # 部署配置
    deployment {
      "/orderProcessor/*" {
        router = round-robin-pool
        nr-of-instances = 5
      }
    }
  }
  
  # 远程配置
  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.port = 2551
    }
  }
  
  # 集群配置
  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
  
  # 日志配置
  loglevel = "WARNING"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off
}

db {
  # 生产环境数据库连接
  url = "jdbc:postgresql://db-master.production:5432/hftdc"
  
  # 数据库用户名
  username = "hftdc_prod"
  
  # 数据库密码 - 应通过环境变量或密钥管理服务获取，这里为占位符
  password = ${?DB_PASSWORD}
  
  # 连接池大小 - 生产环境更大的连接池
  pool-size = 30
}

engine {
  # 每个订单簿最大订单数 - 生产环境更大的容量
  max-orders-per-book = 5000000
  
  # 最大交易品种数
  max-instruments = 2000
  
  # 快照间隔（毫秒）- 生产环境更频繁的快照
  snapshot-interval = 30000
  
  # 清理闲置Actor的时间（分钟）
  cleanup-idle-actors-after-minutes = 15
}

recovery {
  # 生产环境必须启用恢复功能
  enabled = true
  
  # 包含快照前的事件以确保数据完整性
  include-events-before-snapshot = true
  
  # 快照前事件的时间窗口（毫秒）
  events-before-snapshot-time-window-ms = 5000
  
  # 自动启动快照管理器
  auto-start-snapshots = true
}

# 日志相关配置
journal {
  # 日志目录 - 生产环境使用更持久的存储路径
  base-dir = "/data/hftdc/journal"
  
  # 快照目录
  snapshot-dir = "/data/hftdc/snapshots"
  
  # 刷盘间隔（毫秒）- 生产环境更频繁刷盘
  flush-interval-ms = 500
}

# 市场数据配置
market-data {
  # 发布间隔（毫秒）- 生产环境更频繁的市场数据更新
  publish-interval-ms = 500
  
  # 最大订阅数 - 生产环境支持更多客户端
  max-subscriptions = 10000
}

# API服务配置
api {
  # 生产环境使用标准HTTP端口配置
  http-port = 80
  
  # WebSocket服务端口
  ws-port = 443
  
  # REST API基础路径
  base-path = "/api/v1"
  
  # 生产环境应该对CORS进行更严格的控制
  enable-cors = true
  
  # 请求超时时间（毫秒）
  request-timeout-ms = 15000
}

# 监控配置
monitoring {
  # 生产环境必须启用监控
  prometheus-enabled = true
  
  # Prometheus端口
  prometheus-port = 9090
  
  # 监控数据刷新间隔（秒）
  metrics-interval-seconds = 10
}

# 性能优化配置
performance {
  # 启用JVM参数优化
  jvm-optimizations-enabled = true
  
  # GC日志目录
  gc-log-dir = "/data/hftdc/logs/gc"
  
  # 启用堆外内存
  off-heap-enabled = true
  
  # 堆外内存大小(MB)
  off-heap-size-mb = 4096
}

# 安全配置
security {
  # 启用SSL
  ssl-enabled = true
  
  # SSL证书路径
  ssl-certificate = "/etc/hftdc/ssl/server.crt"
  
  # SSL私钥路径
  ssl-private-key = "/etc/hftdc/ssl/server.key"
  
  # 启用API密钥认证
  api-key-auth-enabled = true
  
  # 启用IP白名单
  ip-whitelist-enabled = true
  
  # 允许的IP地址列表
  allowed-ips = [
    "10.0.0.0/8",
    "172.16.0.0/12"
  ]
} 